#pragma kernel SurfaceLight

struct Inputs
{
	float4x4 vp;
	float intensity;
	float rayadvance;
};

StructuredBuffer<Inputs> _Inputs;
Texture2D _NormalBuffer;
Texture2D _PositionBuffer;
Texture2D _ColorBuffer;
Texture2D _GlowBuffer;
Texture2D<half4> _FrameBuffer;
RWTexture2D<half4> _FrameBufferRW;

[numthreads(32,32,1)]
void SurfaceLight(uint3 dtid : SV_DispatchThreadID)
{
	float3 g = _GlowBuffer[dtid.xy].xyz;
	//if(dot(g.xyz, g.xyz)==0.0) { return; }

	float3 p = _PositionBuffer[dtid.xy].xyz;
	float3 n = _NormalBuffer[dtid.xy].xyz;

	float4x4 VP = _Inputs[0].vp;
	float _RayAdvance = _Inputs[0].rayadvance;
	float _Intensity = _Inputs[0].intensity;

	const int NumRays = 32;
	float3 noises[NumRays] = {
		float3(0.299770679079036, 0.028769771770672525, -0.4402611634465541),
		float3(-0.2853237177407668, -0.8060534795027525, -0.9935830942267823),
		float3(-0.029252807123330005, -0.6765059768646038, 0.4969551916358812),
		float3(-0.22098385932900477, 0.2662535703425122, -0.788856120995574),
		float3(0.695754897254758, -0.5718054892130271, -0.743102663476461),
		float3(0.26407524829170814, 0.8894364763037428, 0.9048350244917454),
		float3(-0.13197866555190618, -0.4292852782745047, -0.8751572261896576),
		float3(-0.2035536647098164, -0.3052838306543715, 0.5916950137885006),
		float3(-0.6854705760802371, 0.6232956968385268, -0.8882261985022002),
		float3(0.8328322865621822, 0.6605785897813787, -0.24545965286581883),
		float3(0.9284437470694853, 0.3970448641597968, 0.8108399054465596),
		float3(-0.04303781995598732, 0.023687626482127078, -0.5763926448791481),
		float3(-0.9246506575493791, -0.359559150431493, -0.9209366469270934),
		float3(-0.04083489202294199, -0.8788017832000885, -0.08040917018435745),
		float3(0.8266306289700607, -0.3864816792225585, -0.13937797311386624),
		float3(0.8316865600015659, -0.7274336673098203, 0.8170948646186325),
		float3(-0.20066331089847544, -0.6527723257262945, -0.8347762912712122),
		float3(-0.9461718256362686, 0.9711390011668026, -0.31748486628171135),
		float3(0.3157557920626337, 0.36769240560657335, 0.9208734716187164),
		float3(0.5255800122219827, 0.870725936481467, 0.7874180820367482),
		float3(-0.29754535669355864, 0.8389453258594644, 0.8383576027609354),
		float3(-0.6480119718144361, 0.1949066787876239, 0.19188567534502132),
		float3(0.5063497432218258, -0.5323161221301802, 0.050227784310383106),
		float3(0.6486069777036012, 0.3186278433325791, -0.4156688247525442),
		float3(0.4725652146314949, -0.4371837017948006, -0.12613389982622447),
		float3(-0.9878906346951295, 0.9597587475965959, -0.07583475038660925),
		float3(-0.69098943397359, 0.44365336357929896, 0.021464208719865985),
		float3(-0.1441930718544595, 0.2455018830498441, -0.8241684885163216),
		float3(0.6077712923249039, -0.8860614130961615, 0.6525222074711141),
		float3(-0.1449417895644014, 0.35614323321410457, -0.9949455635187632),
		float3(-0.5647273518543079, -0.6033460530577668, -0.4911966487996653),
		float3(-0.735845383479194, -0.016089136760386147, 0.1972106662671922),
	};
	for(int j=0; j<NumRays; ++j) {
		float3 raypos = p + (n+noises[j]) * _RayAdvance;
		float4 tpos = mul(VP, float4(raypos, 1.0) );
		float2 tcoord = (tpos.xy / tpos.w + 1.0) * 0.5;
		tcoord.y = 1.0-tcoord.y;
		float4 c = _FrameBuffer[tcoord];
		_FrameBufferRW[tcoord] = _FrameBuffer[tcoord] + float4(g*_Intensity, 0.0);
	}
	//_FrameBufferRW[dtid.xy] = _FrameBuffer[dtid.xy] + 0.2;
}

